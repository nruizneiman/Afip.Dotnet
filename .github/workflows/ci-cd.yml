name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  DOTNET_VERSION: '6.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore Dependencies
      run: dotnet restore

    - name: Build Solution
      run: dotnet build --configuration Release --no-restore

    - name: Run Unit Tests
      run: dotnet test --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage

    - name: Generate Code Coverage Report
      uses: danielpalme/ReportGenerator-GitHub-Action@5.2.0
      with:
        reports: coverage/**/coverage.cobertura.xml
        targetdir: coveragereport
        reporttypes: Html;Cobertura
        verbosity: Info

    - name: Upload Coverage Reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coveragereport/Cobertura.xml
        fail_ci_if_error: false

    - name: Upload Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: coverage/

    - name: Upload Coverage Report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coveragereport/

  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore Dependencies
      run: dotnet restore

    - name: Run Security Scan
      run: |
        dotnet list package --vulnerable --include-transitive 2>&1 | tee security-scan.log
        if grep -q "has the following vulnerable packages" security-scan.log; then
          echo "Vulnerable packages found"
          exit 1
        fi

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: csharp

    - name: Build for CodeQL
      run: dotnet build --configuration Release

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  package:
    name: Package
    runs-on: ubuntu-latest
    needs: [test, security-analysis]
    if: github.event_name == 'push' || github.event_name == 'release'

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.10.2
      with:
        versionSpec: '5.x'

    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.10.2
      with:
        useConfigFile: true

    - name: Restore Dependencies
      run: dotnet restore

    - name: Build Solution
      run: dotnet build --configuration Release --no-restore /p:Version=${{ steps.gitversion.outputs.assemblySemVer }} /p:FileVersion=${{ steps.gitversion.outputs.assemblySemFileVer }} /p:InformationalVersion=${{ steps.gitversion.outputs.informationalVersion }}

    - name: Pack NuGet Packages
      run: |
        dotnet pack src/Afip.Dotnet.Abstractions/Afip.Dotnet.Abstractions.csproj --configuration Release --no-build --output ./packages /p:PackageVersion=${{ steps.gitversion.outputs.nuGetVersionV2 }}
        dotnet pack src/Afip.Dotnet/Afip.Dotnet.csproj --configuration Release --no-build --output ./packages /p:PackageVersion=${{ steps.gitversion.outputs.nuGetVersionV2 }}

    - name: Upload Packages
      uses: actions/upload-artifact@v3
      with:
        name: nuget-packages
        path: ./packages/*.nupkg

    - name: Upload Symbols
      uses: actions/upload-artifact@v3
      with:
        name: symbols-packages
        path: ./packages/*.snupkg

  deploy-prerelease:
    name: Deploy Pre-release
    runs-on: ubuntu-latest
    needs: [package]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: 
      name: pre-release
      url: https://www.nuget.org/packages/Afip.Dotnet

    steps:
    - name: Download Packages
      uses: actions/download-artifact@v3
      with:
        name: nuget-packages
        path: ./packages

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Push to NuGet (Pre-release)
      run: |
        dotnet nuget push "./packages/*.nupkg" \
          --api-key ${{ secrets.NUGET_API_KEY }} \
          --source https://api.nuget.org/v3/index.json \
          --skip-duplicate

  deploy-release:
    name: Deploy Release
    runs-on: ubuntu-latest
    needs: [package]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: 
      name: production
      url: https://www.nuget.org/packages/Afip.Dotnet

    steps:
    - name: Download Packages
      uses: actions/download-artifact@v3
      with:
        name: nuget-packages
        path: ./packages

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Push to NuGet (Release)
      run: |
        dotnet nuget push "./packages/*.nupkg" \
          --api-key ${{ secrets.NUGET_API_KEY }} \
          --source https://api.nuget.org/v3/index.json \
          --skip-duplicate

    - name: Create GitHub Release Assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./packages/*.nupkg
          ./packages/*.snupkg
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  documentation:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install DocFX
      run: dotnet tool install -g docfx

    - name: Generate Documentation
      run: |
        # Create DocFX project if it doesn't exist
        if [ ! -f "docfx.json" ]; then
          docfx init -q
        fi
        docfx docfx.json

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./_site