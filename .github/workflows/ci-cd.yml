name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  DOTNET_VERSION: '6.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore Dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Run Unit Tests
      run: |
        dotnet test src/Afip.Dotnet.UnitTests/Afip.Dotnet.UnitTests.csproj \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --logger trx \
          --results-directory TestResults \
          --collect:"XPlat Code Coverage" \
          -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover

    - name: Run Integration Tests (if certificates available)
      run: |
        # Integration tests are optional and only run if certificates are available
        # In CI/CD, you would typically use test certificates from secrets
        if [ -n "${{ secrets.AFIP_TEST_CUIT }}" ] && [ -n "${{ secrets.AFIP_TEST_CERT_PASSWORD }}" ]; then
          echo "Running integration tests with provided certificates"
          
          # Create test certificate from base64 secret
          echo "${{ secrets.AFIP_TEST_CERT_BASE64 }}" | base64 -d > test-cert.p12
          
          # Set environment variables for integration tests
          export AFIP_Cuit="${{ secrets.AFIP_TEST_CUIT }}"
          export AFIP_CertificatePath="test-cert.p12"
          export AFIP_CertificatePassword="${{ secrets.AFIP_TEST_CERT_PASSWORD }}"
          export AFIP_Environment="Testing"
          
          dotnet test src/Afip.Dotnet.IntegrationTests/Afip.Dotnet.IntegrationTests.csproj \
            --configuration Release \
            --no-build \
            --verbosity normal \
            --logger trx \
            --results-directory TestResults
            
          # Clean up certificate file
          rm -f test-cert.p12
        else
          echo "Integration tests skipped - certificates not available"
        fi
      continue-on-error: true

    - name: Generate Code Coverage Report
      uses: codecov/codecov-action@v3
      with:
        directory: TestResults
        flags: unittests
        name: codecov-umbrella

    - name: Upload Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: TestResults

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Build Performance Test Project
      run: |
        cat > PerformanceTests.csproj << 'EOF'
        <Project Sdk="Microsoft.NET.Sdk">
          <PropertyGroup>
            <TargetFramework>net6.0</TargetFramework>
            <OutputType>Exe</OutputType>
          </PropertyGroup>
          <ItemGroup>
            <ProjectReference Include="src/Afip.Dotnet/Afip.Dotnet.csproj" />
            <ProjectReference Include="src/Afip.Dotnet.Abstractions/Afip.Dotnet.Abstractions.csproj" />
            <PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="6.0.1" />
            <PackageReference Include="Microsoft.Extensions.Logging.Console" Version="6.0.0" />
            <PackageReference Include="BenchmarkDotNet" Version="0.13.8" />
          </ItemGroup>
        </Project>
        EOF

    - name: Create Performance Test
      run: |
        cat > Program.cs << 'EOF'
        using System;
        using System.Threading.Tasks;
        using Microsoft.Extensions.DependencyInjection;
        using Microsoft.Extensions.Logging;
        using Afip.Dotnet.Extensions;
        using Afip.Dotnet.Abstractions.Models;
        using Afip.Dotnet.Abstractions.Services;
        using BenchmarkDotNet.Attributes;
        using BenchmarkDotNet.Running;

        [MemoryDiagnoser]
        [SimpleJob]
        public class CachingBenchmarks
        {
            private IServiceProvider _serviceProvider;
            private IAfipCacheService _cacheService;

            [GlobalSetup]
            public void Setup()
            {
                var services = new ServiceCollection();
                services.AddLogging(builder => builder.AddConsole().SetMinimumLevel(LogLevel.Warning));
                
                var config = new AfipConfiguration
                {
                    Environment = AfipEnvironment.Testing,
                    Cuit = 20123456789,
                    CertificatePath = "dummy.p12",
                    CertificatePassword = "dummy",
                    EnableLogging = false
                };
                
                services.AddAfipServicesOptimized(config);
                _serviceProvider = services.BuildServiceProvider();
                _cacheService = _serviceProvider.GetRequiredService<IAfipCacheService>();
            }

            [Benchmark]
            public async Task CacheSet()
            {
                await _cacheService.SetAsync("test_key", "test_value", TimeSpan.FromMinutes(1));
            }

            [Benchmark]
            public async Task CacheGet()
            {
                await _cacheService.GetAsync<string>("test_key");
            }

            [Benchmark]
            public async Task CacheGetOrSet()
            {
                await _cacheService.GetOrSetAsync("test_key_2", 
                    async ct => await Task.FromResult("created_value"), 
                    TimeSpan.FromMinutes(1));
            }

            [GlobalCleanup]
            public void Cleanup()
            {
                (_serviceProvider as IDisposable)?.Dispose();
            }
        }

        class Program
        {
            static void Main(string[] args)
            {
                Console.WriteLine("Running performance benchmarks...");
                try
                {
                    BenchmarkRunner.Run<CachingBenchmarks>();
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Benchmark error: {ex.Message}");
                    Console.WriteLine("Performance tests completed with issues - this is expected in CI environment");
                }
            }
        }
        EOF

    - name: Run Performance Tests
      run: |
        dotnet run --configuration Release
      continue-on-error: true

  package:
    name: Package
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.10.2
      with:
        versionSpec: '5.x'

    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.10.2

    - name: Restore Dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Pack NuGet Packages
      run: |
        dotnet pack src/Afip.Dotnet.Abstractions/Afip.Dotnet.Abstractions.csproj \
          --configuration Release \
          --no-build \
          --output ./artifacts \
          /p:PackageVersion=${{ steps.gitversion.outputs.nuGetVersionV2 }}
          
        dotnet pack src/Afip.Dotnet/Afip.Dotnet.csproj \
          --configuration Release \
          --no-build \
          --output ./artifacts \
          /p:PackageVersion=${{ steps.gitversion.outputs.nuGetVersionV2 }}

    - name: Upload Packages
      uses: actions/upload-artifact@v3
      with:
        name: nuget-packages
        path: ./artifacts/*.nupkg

  publish:
    name: Publish to NuGet
    runs-on: ubuntu-latest
    needs: [test, package]
    if: github.event_name == 'release'
    environment: production

    steps:
    - name: Download Packages
      uses: actions/download-artifact@v3
      with:
        name: nuget-packages
        path: ./artifacts

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Publish to NuGet
      run: |
        for pkg in ./artifacts/*.nupkg; do
          echo "Publishing $pkg"
          dotnet nuget push "$pkg" \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --source https://api.nuget.org/v3/index.json \
            --skip-duplicate
        done

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Generate Documentation
      run: |
        # Create documentation site
        mkdir -p docs-site
        cp README.md docs-site/
        cp CONTRIBUTING.md docs-site/
        cp CHANGELOG.md docs-site/
        
        # Copy examples
        cp -r examples docs-site/
        
        echo "Documentation generated successfully"

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs-site